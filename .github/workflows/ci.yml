name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thclone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Lint code
      run: |
        yarn workspace @thclone/backend lint
        yarn workspace @thclone/frontend lint

    - name: Type check
      run: |
        yarn workspace @thclone/shared type-check
        yarn workspace @thclone/backend type-check
        yarn workspace @thclone/frontend type-check

    - name: Build packages
      run: |
        yarn workspace @thclone/shared build
        yarn workspace @thclone/database build
        yarn workspace @thclone/ui build

    - name: Generate Prisma client
      run: yarn workspace @thclone/database db:generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thclone_test

    - name: Run database migrations
      run: yarn workspace @thclone/database db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thclone_test

    - name: Run backend tests
      run: yarn workspace @thclone/backend test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thclone_test
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379

    - name: Run frontend tests
      run: yarn workspace @thclone/frontend test --run
      env:
        VITE_GRAPHQL_URL: http://localhost:4000/graphql

    - name: Build applications
      run: |
        yarn workspace @thclone/backend build
        yarn workspace @thclone/frontend build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --immutable

    - name: Audit dependencies
      run: yarn audit

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Extract metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max