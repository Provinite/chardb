# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActivityContent {
  description: String
  name: String
  title: String
}

input ActivityFeedInput {
  limit: Int = 20
  offset: Int = 0
}

type ActivityItem {
  content: ActivityContent
  createdAt: DateTime!
  entityId: String!
  id: String!
  type: String!
  user: User!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Character {
  _count: CharacterCount
  age: String
  backstory: String
  createdAt: DateTime!
  creator: User
  creatorId: ID
  customFields: String
  description: String
  gender: String
  id: ID!
  isSellable: Boolean!
  isTradeable: Boolean!
  likesCount: Int!

  """Main media item for this character (image or text)"""
  mainMedia: Media

  """ID of the main media item for this character"""
  mainMediaId: ID
  name: String!
  owner: User!
  ownerId: ID!
  personality: String
  price: Float
  species: String
  tags: [String!]!
  tags_rel: [CharacterTag!]
  updatedAt: DateTime!
  userHasLiked: Boolean!
  visibility: Visibility!
}

type CharacterConnection {
  characters: [Character!]!
  hasMore: Boolean!
  total: Int!
}

type CharacterCount {
  media: Int!
}

input CharacterFiltersInput {
  ageRange: String
  gender: String
  isSellable: Boolean
  isTradeable: Boolean
  limit: Int! = 20
  maxPrice: Float
  minPrice: Float
  offset: Int! = 0
  ownerId: ID
  search: String
  searchFields: String
  sortBy: String
  sortOrder: String
  species: String
  tags: [String!]
  visibility: Visibility
}

type CharacterTag {
  character: Character!
  tag: Tag!
}

type Comment {
  author: User!
  authorId: ID!
  character: Character
  commentableId: ID!
  commentableType: CommentableType!
  content: String!
  createdAt: DateTime!
  gallery: Gallery
  id: ID!
  image: Image
  isHidden: Boolean!
  likesCount: Int!
  parent: Comment
  parentId: ID
  replies: [Comment!]!
  repliesCount: Int!
  updatedAt: DateTime!
  userHasLiked: Boolean!
}

type CommentConnection {
  comments: [Comment!]!
  hasMore: Boolean!
  total: Int!
}

input CommentFiltersInput {
  entityId: ID
  entityType: CommentableType
  limit: Int! = 20
  offset: Int! = 0
  parentId: ID
}

"""Types of entities that can be commented on"""
enum CommentableType {
  CHARACTER
  GALLERY
  IMAGE
  USER
}

input CreateCharacterInput {
  age: String
  backstory: String
  customFields: String
  description: String
  gender: String
  isSellable: Boolean! = false
  isTradeable: Boolean! = false
  name: String!
  personality: String
  price: Float
  species: String
  tags: [String!]! = []
  visibility: Visibility! = PUBLIC
}

input CreateCommentInput {
  content: String!
  entityId: ID!
  entityType: CommentableType!
  parentId: ID
}

input CreateGalleryInput {
  characterId: ID
  description: String
  name: String!
  sortOrder: Int! = 0
  visibility: Visibility! = PUBLIC
}

"""Input type for creating new text media"""
input CreateTextMediaInput {
  """Optional character to associate with this media"""
  characterId: ID

  """The actual text content"""
  content: String!

  """Optional description for the text media"""
  description: String

  """Text formatting type (plaintext or markdown)"""
  formatting: TextFormatting! = PLAINTEXT

  """Optional gallery to add this media to"""
  galleryId: ID

  """Title for the text media"""
  title: String!

  """Visibility setting for the media"""
  visibility: Visibility! = PUBLIC
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FollowListResult {
  followers: [User!]!
  following: [User!]!
  user: User!
}

type FollowResult {
  followersCount: Float!
  followingCount: Float!
  isFollowing: Boolean!
  targetUserId: ID!
}

type FollowStatus {
  followersCount: Float!
  followingCount: Float!
  isFollowing: Boolean!
}

type Gallery {
  _count: GalleryCount
  character: Character
  characterId: ID
  createdAt: DateTime!
  description: String
  id: ID!
  images: [Image!]!
  likesCount: Int!
  name: String!
  owner: User!
  ownerId: ID!
  sortOrder: Int!
  updatedAt: DateTime!
  userHasLiked: Boolean!
  visibility: Visibility!
}

type GalleryConnection {
  galleries: [Gallery!]!
  hasMore: Boolean!
  total: Int!
}

type GalleryCount {
  images: Int!
}

input GalleryFiltersInput {
  characterId: ID
  limit: Int! = 20
  offset: Int! = 0
  ownerId: ID
  visibility: Visibility
}

input GalleryImageOperationInput {
  imageId: ID!
}

type Image {
  altText: String
  artist: User
  artistId: ID
  artistName: String
  artistUrl: String
  character: Character
  characterId: ID
  createdAt: DateTime!
  description: String
  fileSize: Int!
  filename: String!
  gallery: Gallery
  galleryId: ID
  height: Int!
  id: ID!
  isNsfw: Boolean!
  likesCount: Int!
  mimeType: String!
  originalFilename: String!
  sensitiveContentDescription: String
  source: String
  tags_rel: [ImageTag!]
  thumbnailUrl: String
  updatedAt: DateTime!
  uploader: User!
  uploaderId: ID!
  url: String!
  userHasLiked: Boolean!
  visibility: Visibility!
  width: Int!
}

type ImageConnection {
  hasMore: Boolean!
  images: [Image!]!
  total: Int!
}

input ImageFiltersInput {
  artistId: ID
  characterId: ID
  galleryId: ID
  isNsfw: Boolean
  limit: Int! = 20
  offset: Int! = 0
  search: String
  uploaderId: ID
  visibility: Visibility
}

type ImageTag {
  image: Image!
  tag: Tag!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LikeResult {
  entityId: ID!
  entityType: LikeableType!
  isLiked: Boolean!
  likesCount: Float!
}

type LikeStatus {
  isLiked: Boolean!
  likesCount: Float!
}

"""Types of entities that can be liked"""
enum LikeableType {
  CHARACTER
  COMMENT
  GALLERY
  IMAGE
}

input LoginInput {
  email: String!
  password: String!
}

input ManageImageTagsInput {
  tagNames: [String!]!
}

"""Input type for managing media tags"""
input ManageMediaTagsInput {
  """Array of tag names to add or remove"""
  tagNames: [String!]!
}

input ManageTagsInput {
  tagNames: [String!]!
}

"""Polymorphic media that can represent both images and text content"""
type Media {
  """The character this media is associated with, if any"""
  character: Character

  """Optional ID of the character this media is associated with"""
  characterId: ID

  """When the media was created"""
  createdAt: DateTime!

  """Optional description for the media"""
  description: String

  """The gallery this media belongs to, if any"""
  gallery: Gallery

  """Optional ID of the gallery this media belongs to"""
  galleryId: ID

  """Unique identifier for the media"""
  id: ID!

  """Image content (populated for image media)"""
  image: Image

  """Foreign key to image content (null for text media)"""
  imageId: ID

  """Number of likes this media has received"""
  likesCount: Float!

  """The user who owns this media"""
  owner: User!

  """ID of the user who owns this media"""
  ownerId: ID!

  """Tag relationships for this media"""
  tags_rel: [MediaTag!]

  """Text content (populated for text media)"""
  textContent: TextContent

  """Foreign key to text content (null for image media)"""
  textContentId: ID

  """User-provided title for the media"""
  title: String!

  """When the media was last updated"""
  updatedAt: DateTime!

  """Whether the current user has liked this media"""
  userHasLiked: Boolean!

  """Visibility setting for the media"""
  visibility: Visibility!
}

"""Paginated connection result for media queries"""
type MediaConnection {
  """Whether there are more items available after this page"""
  hasMore: Boolean!

  """Array of media items for this page"""
  media: [Media!]!

  """Total number of media items matching the query"""
  total: Float!
}

"""Input type for filtering and paginating media queries"""
input MediaFiltersInput {
  """Filter by associated character ID"""
  characterId: ID

  """Filter by gallery ID"""
  galleryId: ID

  """Maximum number of results to return"""
  limit: Float

  """Filter by media type (image or text)"""
  mediaType: MediaType

  """Number of results to skip for pagination"""
  offset: Float

  """Filter by owner user ID"""
  ownerId: ID

  """Search term to filter by title and description"""
  search: String

  """Filter by visibility level"""
  visibility: Visibility
}

"""Junction entity for media-tag relationships"""
type MediaTag {
  """The media this tag is associated with"""
  media: Media

  """The tag applied to the media"""
  tag: Tag!
}

"""The type of media content for filtering"""
enum MediaType {
  IMAGE
  TEXT
}

type Mutation {
  addCharacterTags(id: ID!, input: ManageTagsInput!): Character!
  addImageTags(id: ID!, input: ManageImageTagsInput!): Image!
  addImageToGallery(galleryId: ID!, input: GalleryImageOperationInput!): Gallery!

  """Adds tags to a media item"""
  addMediaTags(
    """Media ID to add tags to"""
    id: ID!

    """Tags to add to the media"""
    input: ManageMediaTagsInput!
  ): Media!
  createCharacter(input: CreateCharacterInput!): Character!
  createComment(input: CreateCommentInput!): Comment!
  createGallery(input: CreateGalleryInput!): Gallery!

  """Creates a new text media item"""
  createTextMedia(
    """Text media creation parameters"""
    input: CreateTextMediaInput!
  ): Media!
  deleteAccount: Boolean!
  deleteCharacter(id: ID!): Boolean!
  deleteComment(id: ID!): Boolean!
  deleteGallery(id: ID!): Boolean!
  deleteImage(id: ID!): Boolean!

  """Deletes a media item and its associated content"""
  deleteMedia(
    """Media ID to delete"""
    id: ID!
  ): Boolean!
  login(input: LoginInput!): AuthPayload!
  refreshToken(token: String!): String!
  removeCharacterTags(id: ID!, input: ManageTagsInput!): Character!
  removeImageFromGallery(galleryId: ID!, input: GalleryImageOperationInput!): Gallery!
  removeImageTags(id: ID!, input: ManageImageTagsInput!): Image!

  """Removes tags from a media item"""
  removeMediaTags(
    """Media ID to remove tags from"""
    id: ID!

    """Tags to remove from the media"""
    input: ManageMediaTagsInput!
  ): Media!
  reorderGalleries(input: ReorderGalleriesInput!): [Gallery!]!

  """Sets or clears the main media for a character"""
  setCharacterMainMedia(
    """Character ID to update"""
    id: ID!

    """Main media setting parameters"""
    input: SetMainMediaInput!
  ): Character!
  signup(input: SignupInput!): AuthPayload!
  toggleFollow(input: ToggleFollowInput!): FollowResult!
  toggleLike(input: ToggleLikeInput!): LikeResult!
  transferCharacter(id: ID!, input: TransferCharacterInput!): Character!
  updateCharacter(id: ID!, input: UpdateCharacterInput!): Character!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  updateGallery(id: ID!, input: UpdateGalleryInput!): Gallery!
  updateImage(id: ID!, input: UpdateImageInput!): Image!

  """Updates media metadata (title, description, etc.)"""
  updateMedia(
    """Media ID to update"""
    id: ID!

    """Updated media parameters"""
    input: UpdateMediaInput!
  ): Media!
  updateProfile(input: UpdateUserInput!): User!

  """Updates the text content of a text media item"""
  updateTextContent(
    """Updated text content parameters"""
    input: UpdateTextContentInput!

    """Media ID containing the text content to update"""
    mediaId: ID!
  ): Media!
}

type Query {
  activityFeed(input: ActivityFeedInput): [ActivityItem!]!
  character(id: ID!): Character!
  characterGalleries(characterId: ID!, filters: GalleryFiltersInput): GalleryConnection!
  characterImages(characterId: ID!, filters: ImageFiltersInput): ImageConnection!

  """Retrieves media associated with a specific character"""
  characterMedia(
    """Character ID whose media to retrieve"""
    characterId: ID!

    """Optional filters for media query"""
    filters: MediaFiltersInput
  ): MediaConnection!
  characters(filters: CharacterFiltersInput): CharacterConnection!
  comment(id: ID!): Comment!
  comments(filters: CommentFiltersInput!): CommentConnection!
  followStatus(userId: ID!): FollowStatus!
  galleries(filters: GalleryFiltersInput): GalleryConnection!
  gallery(id: ID!): Gallery!
  galleryImages(filters: ImageFiltersInput, galleryId: ID!): ImageConnection!

  """Retrieves media from a specific gallery"""
  galleryMedia(
    """Optional filters for media query"""
    filters: MediaFiltersInput

    """Gallery ID whose media to retrieve"""
    galleryId: ID!
  ): MediaConnection!
  getFollowers(username: String!): FollowListResult!
  getFollowing(username: String!): FollowListResult!
  image(id: ID!): Image!
  images(filters: ImageFiltersInput): ImageConnection!
  likeStatus(entityId: ID!, entityType: LikeableType!): LikeStatus!
  likedCharacters: [Character!]!
  likedGalleries: [Gallery!]!
  likedImages: [Image!]!
  me: User!

  """Retrieves paginated media with filtering and visibility controls"""
  media(
    """Optional filters for media query"""
    filters: MediaFiltersInput
  ): MediaConnection!

  """Retrieves a single media item by ID"""
  mediaItem(
    """Media ID to retrieve"""
    id: ID!
  ): Media!
  myCharacters(filters: CharacterFiltersInput): CharacterConnection!
  myGalleries(filters: GalleryFiltersInput): GalleryConnection!
  myImages(filters: ImageFiltersInput): ImageConnection!

  """Retrieves media owned by the current authenticated user"""
  myMedia(
    """Optional filters for media query"""
    filters: MediaFiltersInput
  ): MediaConnection!
  user(id: ID, username: String): User
  userCharacters(filters: CharacterFiltersInput, userId: ID!): CharacterConnection!
  userGalleries(filters: GalleryFiltersInput, userId: ID!): GalleryConnection!
  userImages(filters: ImageFiltersInput, userId: ID!): ImageConnection!

  """Retrieves media owned by a specific user"""
  userMedia(
    """Optional filters for media query"""
    filters: MediaFiltersInput

    """User ID whose media to retrieve"""
    userId: ID!
  ): MediaConnection!
  userProfile(username: String!): UserProfile
  userStats(userId: ID!): UserStats!
  users(limit: Int! = 20, offset: Int! = 0): UserConnection!
}

input ReorderGalleriesInput {
  galleryIds: [ID!]!
}

input SetMainMediaInput {
  mediaId: ID
}

input SignupInput {
  displayName: String
  email: String!
  password: String!
  username: String!
}

type Tag {
  category: String
  color: String
  createdAt: DateTime!
  id: ID!
  name: String!
}

"""Text content with formatting and word count information"""
type TextContent {
  """The actual text content"""
  content: String!

  """Text formatting type (plaintext or markdown)"""
  formatting: TextFormatting!

  """Unique identifier for the text content"""
  id: ID!

  """Automatically calculated word count"""
  wordCount: Float!
}

"""The formatting type for text content"""
enum TextFormatting {
  MARKDOWN
  PLAINTEXT
}

input ToggleFollowInput {
  targetUserId: ID!
}

input ToggleLikeInput {
  entityId: ID!
  entityType: LikeableType!
}

input TransferCharacterInput {
  newOwnerId: ID!
}

input UpdateCharacterInput {
  age: String
  backstory: String
  customFields: String
  description: String
  gender: String
  isSellable: Boolean
  isTradeable: Boolean
  mainMediaId: ID
  name: String
  personality: String
  price: Float
  species: String
  tags: [String!]
  visibility: Visibility
}

input UpdateCommentInput {
  content: String!
}

input UpdateGalleryInput {
  characterId: ID
  description: String
  name: String
  sortOrder: Int
  visibility: Visibility
}

input UpdateImageInput {
  altText: String
  artistId: ID
  artistName: String
  artistUrl: String
  characterId: ID
  description: String
  galleryId: ID
  isNsfw: Boolean
  source: String
  visibility: Visibility
}

"""Input type for updating media metadata"""
input UpdateMediaInput {
  """Updated character association"""
  characterId: ID

  """Updated description for the media"""
  description: String

  """Updated gallery association"""
  galleryId: ID

  """Updated title for the media"""
  title: String

  """Updated visibility setting"""
  visibility: Visibility
}

"""Input type for updating text content specifically"""
input UpdateTextContentInput {
  """Updated text content"""
  content: String

  """Updated text formatting type"""
  formatting: TextFormatting
}

input UpdateUserInput {
  bio: String
  dateOfBirth: String
  displayName: String
  location: String
  privacySettings: JSON
  website: String
}

type User {
  avatarUrl: String
  bio: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  displayName: String
  email: String!
  followersCount: Int!
  followingCount: Int!
  id: ID!
  isAdmin: Boolean!
  isVerified: Boolean!
  location: String
  privacySettings: JSON!
  updatedAt: DateTime!
  userIsFollowing: Boolean!
  username: String!
  website: String
}

type UserConnection {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [User!]!
  totalCount: Float!
}

type UserProfile {
  canViewPrivateContent: Boolean!
  featuredCharacters: [Character!]!
  isOwnProfile: Boolean!
  recentCharacters: [Character!]!
  recentGalleries: [Gallery!]!
  recentImages: [Image!]!
  stats: UserStats!
  user: User!
}

type UserStats {
  charactersCount: Int!
  followersCount: Int!
  followingCount: Int!
  galleriesCount: Int!
  imagesCount: Int!
  totalLikes: Int!
  totalViews: Int!
}

"""Visibility levels for content"""
enum Visibility {
  PRIVATE
  PUBLIC
  UNLISTED
}