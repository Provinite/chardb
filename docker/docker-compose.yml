version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: thclone-postgres
    environment:
      POSTGRES_DB: thclone_dev
      POSTGRES_USER: thclone
      POSTGRES_PASSWORD: thclone_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thclone -d thclone_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: thclone-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: thclone-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://thclone:thclone_password@postgres:5432/thclone_dev
      JWT_SECRET: your-super-secret-jwt-key-here
      REDIS_URL: redis://redis:6379
      PORT: 4000
      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: thclone-backend
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOG_LEVEL: info
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    volumes:
      - ../apps/backend:/app/apps/backend
      - ../packages:/app/packages
      - /app/node_modules
      - /app/apps/backend/node_modules
    command: ["yarn", "workspace", "@thclone/backend", "dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: thclone-frontend
    environment:
      VITE_GRAPHQL_URL: http://localhost:4000/graphql
    ports:
      - "3000:8080"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ../apps/frontend:/app/apps/frontend
      - ../packages:/app/packages
      - /app/node_modules
      - /app/apps/frontend/node_modules
    command: ["yarn", "workspace", "@thclone/frontend", "dev", "--host", "0.0.0.0", "--port", "3000"]

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.56
    container_name: thclone-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "6831:6831/udp"  # UDP collector (legacy)
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector (optional but recommended)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.94.0
    container_name: thclone-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    depends_on:
      jaeger:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: thclone-network