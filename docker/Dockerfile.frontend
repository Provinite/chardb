# Build stage
FROM node:18-alpine AS builder

# Enable Corepack for Yarn 4
RUN corepack enable

WORKDIR /app

# Copy package files
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn
COPY apps/frontend/package.json ./apps/frontend/
COPY packages/shared/package.json ./packages/shared/
COPY packages/ui/package.json ./packages/ui/

# Install dependencies
RUN yarn install --immutable

# Copy source code
COPY apps/frontend ./apps/frontend
COPY packages/shared ./packages/shared
COPY packages/ui ./packages/ui

# Build shared packages first
RUN yarn workspace @chardb/shared build
RUN yarn workspace @chardb/ui build

# Build frontend application
RUN yarn workspace @chardb/frontend build

# Production stage
FROM nginx:alpine AS production

# Copy built application
COPY --from=builder /app/apps/frontend/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Create non-root user
RUN addgroup -g 1001 -S nginx-user
RUN adduser -S frontend -u 1001 -G nginx-user

# Change ownership
RUN chown -R frontend:nginx-user /usr/share/nginx/html
RUN chown -R frontend:nginx-user /var/cache/nginx
RUN chown -R frontend:nginx-user /var/log/nginx
RUN chown -R frontend:nginx-user /etc/nginx/conf.d

# Create temp directories with correct permissions
RUN mkdir -p /var/cache/nginx/client_temp
RUN mkdir -p /var/cache/nginx/proxy_temp
RUN mkdir -p /var/cache/nginx/fastcgi_temp
RUN mkdir -p /var/cache/nginx/uwsgi_temp
RUN mkdir -p /var/cache/nginx/scgi_temp
RUN chown -R frontend:nginx-user /var/cache/nginx

# Change to non-root user
USER frontend

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]